##
## WLD-521-R1 — ESPHome Modbus package (MiniPLC/MicroPLC ↔ WLD)
##

substitutions:
  wld_id: wld_1
  wld_prefix: "WLD#1"
  wld_address: "3"     # firmware default Modbus ID

# If UART/MODBUS aren’t defined globally, uncomment & set pins:
# uart:
#   id: rs485_uart
#   tx_pin: GPIO4         # set to your RS-485 TX
#   rx_pin: GPIO5         # set to your RS-485 RX
#   baud_rate: 19200
#   parity: NONE
#   stop_bits: 1
# modbus:
#   id: modbus_bus
#   uart_id: rs485_uart

modbus_controller:
  - id: ${wld_id}
    address: ${wld_address}
    modbus_id: modbus_bus
    update_interval: 1s
    command_throttle: 0ms


# ===================== Discrete Inputs (FC02) =====================
binary_sensor:
  # DI states (1..5)
  - platform: modbus_controller
    modbus_controller_id: ${wld_id}
    name: "${wld_prefix} DI1"
    address: 1
    register_type: discrete_input
  - platform: modbus_controller
    modbus_controller_id: ${wld_id}
    name: "${wld_prefix} DI2"
    address: 2
    register_type: discrete_input
  - platform: modbus_controller
    modbus_controller_id: ${wld_id}
    name: "${wld_prefix} DI3"
    address: 3
    register_type: discrete_input
  - platform: modbus_controller
    modbus_controller_id: ${wld_id}
    name: "${wld_prefix} DI4"
    address: 4
    register_type: discrete_input
  - platform: modbus_controller
    modbus_controller_id: ${wld_id}
    name: "${wld_prefix} DI5"
    address: 5
    register_type: discrete_input

  # Relay feedback (60..61)
  - platform: modbus_controller
    id: ${wld_id}_r1_state
    modbus_controller_id: ${wld_id}
    name: "${wld_prefix} R1 state"
    address: 60
    register_type: discrete_input
  - platform: modbus_controller
    id: ${wld_id}_r2_state
    modbus_controller_id: ${wld_id}
    name: "${wld_prefix} R2 state"
    address: 61
    register_type: discrete_input

  # LED mirrors (90..93) — keep internal
  - platform: modbus_controller
    modbus_controller_id: ${wld_id}
    name: "${wld_prefix} LED1 (ro)"
    address: 90
    register_type: discrete_input
    internal: true
  - platform: modbus_controller
    modbus_controller_id: ${wld_id}
    name: "${wld_prefix} LED2 (ro)"
    address: 91
    register_type: discrete_input
    internal: true
  - platform: modbus_controller
    modbus_controller_id: ${wld_id}
    name: "${wld_prefix} LED3 (ro)"
    address: 92
    register_type: discrete_input
    internal: true
  - platform: modbus_controller
    modbus_controller_id: ${wld_id}
    name: "${wld_prefix} LED4 (ro)"
    address: 93
    register_type: discrete_input
    internal: true

  # Button mirrors (100..103) — keep internal
  - platform: modbus_controller
    modbus_controller_id: ${wld_id}
    name: "${wld_prefix} BTN1 (ro)"
    address: 100
    register_type: discrete_input
    internal: true
  - platform: modbus_controller
    modbus_controller_id: ${wld_id}
    name: "${wld_prefix} BTN2 (ro)"
    address: 101
    register_type: discrete_input
    internal: true
  - platform: modbus_controller
    modbus_controller_id: ${wld_id}
    name: "${wld_prefix} BTN3 (ro)"
    address: 102
    register_type: discrete_input
    internal: true
  - platform: modbus_controller
    modbus_controller_id: ${wld_id}
    name: "${wld_prefix} BTN4 (ro)"
    address: 103
    register_type: discrete_input
    internal: true


# ===================== Holding (FC03) — 16‑bit or Lo/Hi combine =====================
sensor:
  # Time / Day (U16)
  - platform: modbus_controller
    name: "${wld_prefix} Minutes Since Midnight"
    modbus_controller_id: ${wld_id}
    register_type: holding
    address: 1100
    value_type: U_WORD
    accuracy_decimals: 0

  - platform: modbus_controller
    name: "${wld_prefix} Day Index"
    modbus_controller_id: ${wld_id}
    register_type: holding
    address: 1101
    value_type: U_WORD
    accuracy_decimals: 0

  # ---------- DI Counters (U32) ----------
  # DI1..DI5 counters at 1000..1009 (lo,hi)
  {% for i in [1,2,3,4,5] %}
  - platform: modbus_controller
    id: ${wld_id}_di{{i}}_lo
    modbus_controller_id: ${wld_id}
    address: {{ 1000 + (i-1)*2 }}
    register_type: holding
    value_type: U_WORD
    internal: true
  - platform: modbus_controller
    id: ${wld_id}_di{{i}}_hi
    modbus_controller_id: ${wld_id}
    address: {{ 1001 + (i-1)*2 }}
    register_type: holding
    value_type: U_WORD
    internal: true
  - platform: template
    name: "${wld_prefix} DI{{i}} Count"
    unit_of_measurement: "pulses"
    accuracy_decimals: 0
    update_interval: 1s
    lambda: |-
      return (uint32_t(id(${wld_id}_di{{i}}_lo).state) | (uint32_t(id(${wld_id}_di{{i}}_hi).state) << 16));
  {% endfor %}

  # ---------- Flow (U32 ×1000) ----------
  # Rate base 1120, Total base 1140 for DI1..DI5
  {% for i in [0,1,2,3,4] %}
  - platform: modbus_controller
    id: ${wld_id}_flow{{i+1}}_rate_lo
    modbus_controller_id: ${wld_id}
    address: {{ 1120 + i*2 }}
    register_type: holding
    value_type: U_WORD
    internal: true
  - platform: modbus_controller
    id: ${wld_id}_flow{{i+1}}_rate_hi
    modbus_controller_id: ${wld_id}
    address: {{ 1121 + i*2 }}
    register_type: holding
    value_type: U_WORD
    internal: true
  - platform: template
    name: "${wld_prefix} Flow{{i+1}} Rate"
    unit_of_measurement: "L/min"
    accuracy_decimals: 3
    update_interval: 1s
    lambda: |-
      uint32_t v = (uint32_t(id(${wld_id}_flow{{i+1}}_rate_lo).state) | (uint32_t(id(${wld_id}_flow{{i+1}}_rate_hi).state) << 16));
      return v / 1000.0;

  - platform: modbus_controller
    id: ${wld_id}_flow{{i+1}}_acc_lo
    modbus_controller_id: ${wld_id}
    address: {{ 1140 + i*2 }}
    register_type: holding
    value_type: U_WORD
    internal: true
  - platform: modbus_controller
    id: ${wld_id}_flow{{i+1}}_acc_hi
    modbus_controller_id: ${wld_id}
    address: {{ 1141 + i*2 }}
    register_type: holding
    value_type: U_WORD
    internal: true
  - platform: template
    name: "${wld_prefix} Flow{{i+1}} Total"
    unit_of_measurement: "L"
    accuracy_decimals: 3
    update_interval: 1s
    lambda: |-
      uint32_t v = (uint32_t(id(${wld_id}_flow{{i+1}}_acc_lo).state) | (uint32_t(id(${wld_id}_flow{{i+1}}_acc_hi).state) << 16));
      return v / 1000.0;
  {% endfor %}

  # ---------- Heat (Power=S32, Energy=U32 ×1000, ΔT=S32 ×1000) ----------
  {% for i in [0,1,2,3,4] %}
  # Power {{i+1}} (W)
  - platform: modbus_controller
    id: ${wld_id}_heat{{i+1}}_p_lo
    modbus_controller_id: ${wld_id}
    address: {{ 1200 + i*2 }}
    register_type: holding
    value_type: U_WORD
    internal: true
  - platform: modbus_controller
    id: ${wld_id}_heat{{i+1}}_p_hi
    modbus_controller_id: ${wld_id}
    address: {{ 1201 + i*2 }}
    register_type: holding
    value_type: S_WORD
    internal: true
  - platform: template
    name: "${wld_prefix} Heat{{i+1}} Power"
    unit_of_measurement: "W"
    accuracy_decimals: 0
    update_interval: 1s
    lambda: |-
      uint32_t lo = id(${wld_id}_heat{{i+1}}_p_lo).state;
      int32_t hi = (int16_t)id(${wld_id}_heat{{i+1}}_p_hi).state;
      int32_t v = (hi << 16) | lo;
      return (float)v;

  # Energy {{i+1}} (Wh ×1000 → kWh)
  - platform: modbus_controller
    id: ${wld_id}_heat{{i+1}}_e_lo
    modbus_controller_id: ${wld_id}
    address: {{ 1220 + i*2 }}
    register_type: holding
    value_type: U_WORD
    internal: true
  - platform: modbus_controller
    id: ${wld_id}_heat{{i+1}}_e_hi
    modbus_controller_id: ${wld_id}
    address: {{ 1221 + i*2 }}
    register_type: holding
    value_type: U_WORD
    internal: true
  - platform: template
    name: "${wld_prefix} Heat{{i+1}} Energy"
    unit_of_measurement: "kWh"
    accuracy_decimals: 3
    update_interval: 1s
    lambda: |-
      uint32_t v = (uint32_t(id(${wld_id}_heat{{i+1}}_e_lo).state) | (uint32_t(id(${wld_id}_heat{{i+1}}_e_hi).state) << 16));
      return v / 1000.0;

  # ΔT {{i+1}} (m°C → °C)
  - platform: modbus_controller
    id: ${wld_id}_heat{{i+1}}_dt_lo
    modbus_controller_id: ${wld_id}
    address: {{ 1240 + i*2 }}
    register_type: holding
    value_type: U_WORD
    internal: true
  - platform: modbus_controller
    id: ${wld_id}_heat{{i+1}}_dt_hi
    modbus_controller_id: ${wld_id}
    address: {{ 1241 + i*2 }}
    register_type: holding
    value_type: S_WORD
    internal: true
  - platform: template
    name: "${wld_prefix} Heat{{i+1}} ΔT"
    unit_of_measurement: "°C"
    accuracy_decimals: 3
    update_interval: 1s
    lambda: |-
      uint32_t lo = id(${wld_id}_heat{{i+1}}_dt_lo).state;
      int32_t hi = (int16_t)id(${wld_id}_heat{{i+1}}_dt_hi).state;
      int32_t v = (hi << 16) | lo;
      return v / 1000.0;
  {% endfor %}

  # ---------- Irrigation (Z1..Z2) ----------
  # States/flags (U16)
  - platform: modbus_controller
    modbus_controller_id: ${wld_id}
    address: 1300
    register_type: holding
    value_type: U_WORD
    name: "${wld_prefix} Irr Z1 State"
  - platform: modbus_controller
    modbus_controller_id: ${wld_id}
    address: 1301
    register_type: holding
    value_type: U_WORD
    name: "${wld_prefix} Irr Z2 State"

  # Z1 liters (U32 ×1000)
  - platform: modbus_controller
    id: ${wld_id}_irr1_l_lo
    modbus_controller_id: ${wld_id}
    address: 1310
    register_type: holding
    value_type: U_WORD
    internal: true
  - platform: modbus_controller
    id: ${wld_id}_irr1_l_hi
    modbus_controller_id: ${wld_id}
    address: 1311
    register_type: holding
    value_type: U_WORD
    internal: true
  - platform: template
    name: "${wld_prefix} Irr Z1 Liters"
    unit_of_measurement: "L"
    accuracy_decimals: 3
    update_interval: 1s
    lambda: |-
      uint32_t v = (uint32_t(id(${wld_id}_irr1_l_lo).state) | (uint32_t(id(${wld_id}_irr1_l_hi).state) << 16));
      return v / 1000.0;

  # Z2 liters (U32 ×1000)
  - platform: modbus_controller
    id: ${wld_id}_irr2_l_lo
    modbus_controller_id: ${wld_id}
    address: 1312
    register_type: holding
    value_type: U_WORD
    internal: true
  - platform: modbus_controller
    id: ${wld_id}_irr2_l_hi
    modbus_controller_id: ${wld_id}
    address: 1313
    register_type: holding
    value_type: U_WORD
    internal: true
  - platform: template
    name: "${wld_prefix} Irr Z2 Liters"
    unit_of_measurement: "L"
    accuracy_decimals: 3
    update_interval: 1s
    lambda: |-
      uint32_t v = (uint32_t(id(${wld_id}_irr2_l_lo).state) | (uint32_t(id(${wld_id}_irr2_l_hi).state) << 16));
      return v / 1000.0;

  # Z1 elapsed (U32 s)
  - platform: modbus_controller
    id: ${wld_id}_irr1_t_lo
    modbus_controller_id: ${wld_id}
    address: 1320
    register_type: holding
    value_type: U_WORD
    internal: true
  - platform: modbus_controller
    id: ${wld_id}_irr1_t_hi
    modbus_controller_id: ${wld_id}
    address: 1321
    register_type: holding
    value_type: U_WORD
    internal: true
  - platform: template
    name: "${wld_prefix} Irr Z1 Elapsed"
    unit_of_measurement: "s"
    accuracy_decimals: 0
    update_interval: 1s
    lambda: |-
      uint32_t v = (uint32_t(id(${wld_id}_irr1_t_lo).state) | (uint32_t(id(${wld_id}_irr1_t_hi).state) << 16));
      return (float)v;

  # Z2 elapsed (U32 s)
  - platform: modbus_controller
    id: ${wld_id}_irr2_t_lo
    modbus_controller_id: ${wld_id}
    address: 1322
    register_type: holding
    value_type: U_WORD
    internal: true
  - platform: modbus_controller
    id: ${wld_id}_irr2_t_hi
    modbus_controller_id: ${wld_id}
    address: 1323
    register_type: holding
    value_type: U_WORD
    internal: true
  - platform: template
    name: "${wld_prefix} Irr Z2 Elapsed"
    unit_of_measurement: "s"
    accuracy_decimals: 0
    update_interval: 1s
    lambda: |-
      uint32_t v = (uint32_t(id(${wld_id}_irr2_t_lo).state) | (uint32_t(id(${wld_id}_irr2_t_hi).state) << 16));
      return (float)v;

  # Z1 rate (U32 ×1000 L/min)
  - platform: modbus_controller
    id: ${wld_id}_irr1_r_lo
    modbus_controller_id: ${wld_id}
    address: 1330
    register_type: holding
    value_type: U_WORD
    internal: true
  - platform: modbus_controller
    id: ${wld_id}_irr1_r_hi
    modbus_controller_id: ${wld_id}
    address: 1331
    register_type: holding
    value_type: U_WORD
    internal: true
  - platform: template
    name: "${wld_prefix} Irr Z1 Rate"
    unit_of_measurement: "L/min"
    accuracy_decimals: 3
    update_interval: 1s
    lambda: |-
      uint32_t v = (uint32_t(id(${wld_id}_irr1_r_lo).state) | (uint32_t(id(${wld_id}_irr1_r_hi).state) << 16));
      return v / 1000.0;

  # Z2 rate (U32 ×1000 L/min)
  - platform: modbus_controller
    id: ${wld_id}_irr2_r_lo
    modbus_controller_id: ${wld_id}
    address: 1332
    register_type: holding
    value_type: U_WORD
    internal: true
  - platform: modbus_controller
    id: ${wld_id}_irr2_r_hi
    modbus_controller_id: ${wld_id}
    address: 1333
    register_type: holding
    value_type: U_WORD
    internal: true
  - platform: template
    name: "${wld_prefix} Irr Z2 Rate"
    unit_of_measurement: "L/min"
    accuracy_decimals: 3
    update_interval: 1s
    lambda: |-
      uint32_t v = (uint32_t(id(${wld_id}_irr2_r_lo).state) | (uint32_t(id(${wld_id}_irr2_r_hi).state) << 16));
      return v / 1000.0;

  # Flags (U16)
  - platform: modbus_controller
    modbus_controller_id: ${wld_id}
    address: 1340
    register_type: holding
    value_type: U_WORD
    name: "${wld_prefix} Irr Z1 WindowOpen"
  - platform: modbus_controller
    modbus_controller_id: ${wld_id}
    address: 1341
    register_type: holding
    value_type: U_WORD
    name: "${wld_prefix} Irr Z2 WindowOpen"
  - platform: modbus_controller
    modbus_controller_id: ${wld_id}
    address: 1342
    register_type: holding
    value_type: U_WORD
    name: "${wld_prefix} Irr Z1 SensorsOK"
  - platform: modbus_controller
    modbus_controller_id: ${wld_id}
    address: 1343
    register_type: holding
    value_type: U_WORD
    name: "${wld_prefix} Irr Z2 SensorsOK"

  # ---------- 1‑Wire temps (10× S32 ×1000) ----------
  {% for i in [0,1,2,3,4,5,6,7,8,9] %}
  - platform: modbus_controller
    id: ${wld_id}_ow{{i+1}}_lo
    modbus_controller_id: ${wld_id}
    address: {{ 1500 + i*2 }}
    register_type: holding
    value_type: U_WORD
    internal: true
  - platform: modbus_controller
    id: ${wld_id}_ow{{i+1}}_hi
    modbus_controller_id: ${wld_id}
    address: {{ 1501 + i*2 }}
    register_type: holding
    value_type: S_WORD
    internal: true
  - platform: template
    name: "${wld_prefix} 1W Temp {{i+1}} °C"
    unit_of_measurement: "°C"
    accuracy_decimals: 3
    update_interval: 5s
    lambda: |-
      uint32_t lo = id(${wld_id}_ow{{i+1}}_lo).state;
      int32_t hi = (int16_t)id(${wld_id}_ow{{i+1}}_hi).state;
      int32_t v = (hi << 16) | lo;
      return v / 1000.0;
  {% endfor %}


# ===================== Command Coils (FC05 write / FC01 read) =====================
switch:
  # Relay pulse helpers (internal; pulse & auto-off)
  - platform: modbus_controller
    id: ${wld_id}_r1_on_pulse
    modbus_controller_id: ${wld_id}
    address: 200
    register_type: coil
    internal: true
    on_turn_on:
      - delay: 50ms
      - switch.turn_off: ${wld_id}_r1_on_pulse

  - platform: modbus_controller
    id: ${wld_id}_r1_off_pulse
    modbus_controller_id: ${wld_id}
    address: 210
    register_type: coil
    internal: true
    on_turn_on:
      - delay: 50ms
      - switch.turn_off: ${wld_id}_r1_off_pulse

  - platform: modbus_controller
    id: ${wld_id}_r2_on_pulse
    modbus_controller_id: ${wld_id}
    address: 201
    register_type: coil
    internal: true
    on_turn_on:
      - delay: 50ms
      - switch.turn_off: ${wld_id}_r2_on_pulse

  - platform: modbus_controller
    id: ${wld_id}_r2_off_pulse
    modbus_controller_id: ${wld_id}
    address: 211
    register_type: coil
    internal: true
    on_turn_on:
      - delay: 50ms
      - switch.turn_off: ${wld_id}_r2_off_pulse

  # User-facing relay switches (follow feedback via mirrors)
  - platform: template
    name: "${wld_prefix} Relay 1"
    optimistic: true
    lambda: |-
      return id(${wld_id}_r1_state).state;
    turn_on_action:
      - switch.turn_on: ${wld_id}_r1_on_pulse
    turn_off_action:
      - switch.turn_on: ${wld_id}_r1_off_pulse

  - platform: template
    name: "${wld_prefix} Relay 2"
    optimistic: true
    lambda: |-
      return id(${wld_id}_r2_state).state;
    turn_on_action:
      - switch.turn_on: ${wld_id}_r2_on_pulse
    turn_off_action:
      - switch.turn_on: ${wld_id}_r2_off_pulse

  # DI enable (300..304)
  - platform: modbus_controller
    id: ${wld_id}_di1_enable_coil
    modbus_controller_id: ${wld_id}
    address: 300
    register_type: coil
    internal: true
    on_turn_on: [ delay: 50ms, switch.turn_off: ${wld_id}_di1_enable_coil ]
  - platform: modbus_controller
    id: ${wld_id}_di2_enable_coil
    modbus_controller_id: ${wld_id}
    address: 301
    register_type: coil
    internal: true
    on_turn_on: [ delay: 50ms, switch.turn_off: ${wld_id}_di2_enable_coil ]
  - platform: modbus_controller
    id: ${wld_id}_di3_enable_coil
    modbus_controller_id: ${wld_id}
    address: 302
    register_type: coil
    internal: true
    on_turn_on: [ delay: 50ms, switch.turn_off: ${wld_id}_di3_enable_coil ]
  - platform: modbus_controller
    id: ${wld_id}_di4_enable_coil
    modbus_controller_id: ${wld_id}
    address: 303
    register_type: coil
    internal: true
    on_turn_on: [ delay: 50ms, switch.turn_off: ${wld_id}_di4_enable_coil ]
  - platform: modbus_controller
    id: ${wld_id}_di5_enable_coil
    modbus_controller_id: ${wld_id}
    address: 304
    register_type: coil
    internal: true
    on_turn_on: [ delay: 50ms, switch.turn_off: ${wld_id}_di5_enable_coil ]

  # DI disable (320..324)
  - platform: modbus_controller
    id: ${wld_id}_di1_disable_coil
    modbus_controller_id: ${wld_id}
    address: 320
    register_type: coil
    internal: true
    on_turn_on: [ delay: 50ms, switch.turn_off: ${wld_id}_di1_disable_coil ]
  - platform: modbus_controller
    id: ${wld_id}_di2_disable_coil
    modbus_controller_id: ${wld_id}
    address: 321
    register_type: coil
    internal: true
    on_turn_on: [ delay: 50ms, switch.turn_off: ${wld_id}_di2_disable_coil ]
  - platform: modbus_controller
    id: ${wld_id}_di3_disable_coil
    modbus_controller_id: ${wld_id}
    address: 322
    register_type: coil
    internal: true
    on_turn_on: [ delay: 50ms, switch.turn_off: ${wld_id}_di3_disable_coil ]
  - platform: modbus_controller
    id: ${wld_id}_di4_disable_coil
    modbus_controller_id: ${wld_id}
    address: 323
    register_type: coil
    internal: true
    on_turn_on: [ delay: 50ms, switch.turn_off: ${wld_id}_di4_disable_coil ]
  - platform: modbus_controller
    id: ${wld_id}_di5_disable_coil
    modbus_controller_id: ${wld_id}
    address: 324
    register_type: coil
    internal: true
    on_turn_on: [ delay: 50ms, switch.turn_off: ${wld_id}_di5_disable_coil ]

  # DI counter reset (340..344)
  - platform: modbus_controller
    id: ${wld_id}_di1_reset_coil
    modbus_controller_id: ${wld_id}
    address: 340
    register_type: coil
    internal: true
    on_turn_on: [ delay: 50ms, switch.turn_off: ${wld_id}_di1_reset_coil ]
  - platform: modbus_controller
    id: ${wld_id}_di2_reset_coil
    modbus_controller_id: ${wld_id}
    address: 341
    register_type: coil
    internal: true
    on_turn_on: [ delay: 50ms, switch.turn_off: ${wld_id}_di2_reset_coil ]
  - platform: modbus_controller
    id: ${wld_id}_di3_reset_coil
    modbus_controller_id: ${wld_id}
    address: 342
    register_type: coil
    internal: true
    on_turn_on: [ delay: 50ms, switch.turn_off: ${wld_id}_di3_reset_coil ]
  - platform: modbus_controller
    id: ${wld_id}_di4_reset_coil
    modbus_controller_id: ${wld_id}
    address: 343
    register_type: coil
    internal: true
    on_turn_on: [ delay: 50ms, switch.turn_off: ${wld_id}_di4_reset_coil ]
  - platform: modbus_controller
    id: ${wld_id}_di5_reset_coil
    modbus_controller_id: ${wld_id}
    address: 344
    register_type: coil
    internal: true
    on_turn_on: [ delay: 50ms, switch.turn_off: ${wld_id}_di5_reset_coil ]

  # Midnight sync pulse (360)
  - platform: modbus_controller
    id: ${wld_id}_midnight_pulse
    modbus_controller_id: ${wld_id}
    address: 360
    register_type: coil
    internal: false

  # Irrigation control coils
  - platform: modbus_controller
    id: ${wld_id}_irr1_start
    modbus_controller_id: ${wld_id}
    address: 370
    register_type: coil
    internal: true
    on_turn_on: [ delay: 50ms, switch.turn_off: ${wld_id}_irr1_start ]
  - platform: modbus_controller
    id: ${wld_id}_irr2_start
    modbus_controller_id: ${wld_id}
    address: 371
    register_type: coil
    internal: true
    on_turn_on: [ delay: 50ms, switch.turn_off: ${wld_id}_irr2_start ]
  - platform: modbus_controller
    id: ${wld_id}_irr1_stop
    modbus_controller_id: ${wld_id}
    address: 380
    register_type: coil
    internal: true
    on_turn_on: [ delay: 50ms, switch.turn_off: ${wld_id}_irr1_stop ]
  - platform: modbus_controller
    id: ${wld_id}_irr2_stop
    modbus_controller_id: ${wld_id}
    address: 381
    register_type: coil
    internal: true
    on_turn_on: [ delay: 50ms, switch.turn_off: ${wld_id}_irr2_stop ]
  - platform: modbus_controller
    id: ${wld_id}_irr1_reset
    modbus_controller_id: ${wld_id}
    address: 390
    register_type: coil
    internal: true
    on_turn_on: [ delay: 50ms, switch.turn_off: ${wld_id}_irr1_reset ]
  - platform: modbus_controller
    id: ${wld_id}_irr2_reset
    modbus_controller_id: ${wld_id}
    address: 391
    register_type: coil
    internal: true
    on_turn_on: [ delay: 50ms, switch.turn_off: ${wld_id}_irr2_reset ]


# ===================== Convenience Buttons (pulse the internal coils) =====================
button:
  - platform: template
    name: "${wld_prefix} R1 ON"
    on_press: [ switch.turn_on: ${wld_id}_r1_on_pulse ]
  - platform: template
    name: "${wld_prefix} R1 OFF"
    on_press: [ switch.turn_on: ${wld_id}_r1_off_pulse ]
  - platform: template
    name: "${wld_prefix} R2 ON"
    on_press: [ switch.turn_on: ${wld_id}_r2_on_pulse ]
  - platform: template
    name: "${wld_prefix} R2 OFF"
    on_press: [ switch.turn_on: ${wld_id}_r2_off_pulse ]

  - platform: template
    name: "${wld_prefix} DI1 Enable"
    on_press: [ switch.turn_on: ${wld_id}_di1_enable_coil ]
  - platform: template
    name: "${wld_prefix} DI2 Enable"
    on_press: [ switch.turn_on: ${wld_id}_di2_enable_coil ]
  - platform: template
    name: "${wld_prefix} DI3 Enable"
    on_press: [ switch.turn_on: ${wld_id}_di3_enable_coil ]
  - platform: template
    name: "${wld_prefix} DI4 Enable"
    on_press: [ switch.turn_on: ${wld_id}_di4_enable_coil ]
  - platform: template
    name: "${wld_prefix} DI5 Enable"
    on_press: [ switch.turn_on: ${wld_id}_di5_enable_coil ]

  - platform: template
    name: "${wld_prefix} DI1 Disable"
    on_press: [ switch.turn_on: ${wld_id}_di1_disable_coil ]
  - platform: template
    name: "${wld_prefix} DI2 Disable"
    on_press: [ switch.turn_on: ${wld_id}_di2_disable_coil ]
  - platform: template
    name: "${wld_prefix} DI3 Disable"
    on_press: [ switch.turn_on: ${wld_id}_di3_disable_coil ]
  - platform: template
    name: "${wld_prefix} DI4 Disable"
    on_press: [ switch.turn_on: ${wld_id}_di4_disable_coil ]
  - platform: template
    name: "${wld_prefix} DI5 Disable"
    on_press: [ switch.turn_on: ${wld_id}_di5_disable_coil ]

  - platform: template
    name: "${wld_prefix} DI1 Counter Reset"
    on_press: [ switch.turn_on: ${wld_id}_di1_reset_coil ]
  - platform: template
    name: "${wld_prefix} DI2 Counter Reset"
    on_press: [ switch.turn_on: ${wld_id}_di2_reset_coil ]
  - platform: template
    name: "${wld_prefix} DI3 Counter Reset"
    on_press: [ switch.turn_on: ${wld_id}_di3_reset_coil ]
  - platform: template
    name: "${wld_prefix} DI4 Counter Reset"
    on_press: [ switch.turn_on: ${wld_id}_di4_reset_coil ]
  - platform: template
    name: "${wld_prefix} DI5 Counter Reset"
    on_press: [ switch.turn_on: ${wld_id}_di5_reset_coil ]

  - platform: template
    name: "${wld_prefix} Midnight Pulse"
    on_press: [ switch.turn_on: ${wld_id}_midnight_pulse ]

  - platform: template
    name: "${wld_prefix} Irrigation Z1 START"
    on_press: [ switch.turn_on: ${wld_id}_irr1_start ]
  - platform: template
    name: "${wld_prefix} Irrigation Z2 START"
    on_press: [ switch.turn_on: ${wld_id}_irr2_start ]
  - platform: template
    name: "${wld_prefix} Irrigation Z1 STOP"
    on_press: [ switch.turn_on: ${wld_id}_irr1_stop ]
  - platform: template
    name: "${wld_prefix} Irrigation Z2 STOP"
    on_press: [ switch.turn_on: ${wld_id}_irr2_stop ]
  - platform: template
    name: "${wld_prefix} Irrigation Z1 RESET"
    on_press: [ switch.turn_on: ${wld_id}_irr1_reset ]
  - platform: template
    name: "${wld_prefix} Irrigation Z2 RESET"
    on_press: [ switch.turn_on: ${wld_id}_irr2_reset ]
