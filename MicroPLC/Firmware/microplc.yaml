substitutions:
  name: "homemaster-microplc"
  friendly_name: "Homemaster MicroPLC"
  room: ""
  device_description: "Homemaster MicroPLC"
  project_name: "Homemaster MicroPLC"
  project_version: "v1.0.0"
  update_interval: 60s
  # Define a domain for this device to use. i.e. iot.home.lan (so device will appear as athom-smart-plug-v2.iot.home.lan in DNS/DHCP logs)
  dns_domain: ".local"
  # Set timezone of the smart plug. Useful if the plug is in a location different to the HA server. Can be entered in unix Country/Area format (i.e. "Australia/Sydney")
  timezone: ""
  # Set the duration between the sntp service polling ntp.org servers for an update
  sntp_update_interval: 6h
  # Network time servers for your region, enter from lowest to highest priority. To use local servers update as per zones or countries at: https://www.ntppool.org/zone/@
  sntp_server_1: "0.pool.ntp.org"
  sntp_server_2: "1.pool.ntp.org"
  sntp_server_3: "2.pool.ntp.org"  
  # Enables faster network connections, with last connected SSID being connected to and no full scan for SSID being undertaken
  wifi_fast_connect: "false"
  # Define logging level: NONE, ERROR, WARN, INFO, DEBUG (Default), VERBOSE, VERY_VERBOSE
  log_level: "DEBUG"
  # Enable or disable the use of IPv6 networking on the device
  ipv6_enable: "false"
# Define the name and friendly name for this ESPHome node
esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"
  comment: "${device_description}"
  area: "${room}"
  name_add_mac_suffix: true
  min_version: 2025.7.0
  project:
    name: "${project_name}"
    version: "${project_version}"

# Specify the target board and framework
esp32:
  board: esp32dev
  framework:
    type: esp-idf
    version: recommended  # Use the latest ESP-IDF framework version

# Enable logging over serial
preferences:
  flash_write_interval: 5min

# Enable logging
logger:
  baud_rate: 115200
  level: ${log_level}
# Enable communication with Home Assistant using ESPHome API

mdns:
  disabled: false

web_server:
  port: 80

# Enable Home Assistant API
api:

ota:
  - platform: esphome

network:
  enable_ipv6: ${ipv6_enable}

wifi:
  # This spawns an AP with the device name and mac address with no password.
  ap: {}
  # Allow rapid re-connection to previously connect WiFi SSID, skipping scan of all SSID
  fast_connect: "${wifi_fast_connect}"
  # Define dns domain / suffix to add to hostname
  domain: "${dns_domain}"

# Captive portal for fallback hotspot
captive_portal:

improv_serial:

esp32_improv:
  authorizer: none

dashboard_import:
  package_import_url: github://isystemsautomation/HOMEMASTER/MicroPLC/Firmware/microplc.yaml

# UART interface configuration (typically used for RS485/Modbus communication)
uart:
  tx_pin: 17
  rx_pin: 16
  baud_rate: 115200
  id: mod_uart  # Identifier for UART interface

# Uncomment the following to enable Modbus RTU master configuration
#modbus:
#  send_wait_time: 500ms  # Wait time between sending requests
#  uart_id: mod_uart  # Reference to the UART interface
#  id: mod_bus  # Identifier for Modbus bus

# Uncomment the following to define a Modbus controller (slave device)
#modbus_controller:
#- id: modbus_device
#  address: 0x1  # Modbus slave address
#  update_interval: 1s  # Polling interval
#  modbus_id: mod_bus  # Reference to Modbus bus
#  setup_priority: -10  # Initialization priority

# Enable a web server for basic local status page
web_server: 
  port: 80  # Default HTTP port

# Configure a real-time clock (RTC) over I2C
time:
  - platform: pcf8563
    id: pcf8563_time
    address: 0x51  # I2C address of PCF8563 RTC module

# I2C bus configuration
i2c:
  - id: bus_a
    sda: 32  # SDA pin
    scl: 33  # SCL pin
    scan: true  # Scan for connected I2C devices on startup

# OneWire bus configuration (e.g., for DS18B20 temperature sensors)
one_wire:
  - platform: gpio
    pin: GPIO05
    id: hub_1  # Identifier for OneWire bus

# GPIO switch (e.g., to control a relay)
switch:
  - platform: gpio
    name: "Relay"  # Switch name shown in Home Assistant
    pin: 26  # GPIO pin connected to the relay

# Status LED indicator configuration
status_led:
  pin:
    number: GPIO25  # GPIO pin connected to status LED
    inverted: true  # Invert logic (LED on = LOW)
